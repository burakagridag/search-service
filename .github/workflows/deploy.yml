name: Deploy Search Service to Google Cloud Run

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [closed]

env:
  PROJECT_ID: invest-xpert-465905
  SERVICE_NAME: search-service
  REGION: europe-west1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Run tests
      run: ./gradlew test --no-daemon

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      continue-on-error: true
      with:
        name: Gradle Tests
        path: '**/build/test-results/test/*.xml'
        reporter: java-junit
        fail-on-error: false

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: always() && ((github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event.pull_request.merged == true && github.base_ref == 'main'))
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # Authenticate to Google Cloud
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.SEARCH_GCP_SERVICE_ACCOUNT_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    # Verify authentication and project setup
    - name: Verify GCP Setup
      run: |
        echo "🔍 Verifying GCP authentication and setup..."
        gcloud config set project ${{ env.PROJECT_ID }}
        gcloud config list
        echo "✅ Active project: $(gcloud config get-value project)"
        
        # Verify we can access the project
        gcloud projects describe ${{ env.PROJECT_ID }}
        
        # Check if Artifact Registry repository exists
        if gcloud artifacts repositories describe ${{ env.SERVICE_NAME }} --location=${{ env.REGION }} 2>/dev/null; then
          echo "✅ Artifact Registry repository exists"
        else
          echo "❌ Artifact Registry repository not found. This should be created by bootstrap workflow."
          exit 1
        fi

    # Configure Docker to use gcloud as credential helper for Artifact Registry
    - name: Configure Docker for Artifact Registry
      run: |
        echo "🔧 Configuring Docker for Artifact Registry..."
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
        
        # Test Docker authentication
        echo "🧪 Testing Docker authentication..."
        docker run --rm gcr.io/google.com/cloudsdktool/cloud-sdk:latest gcloud auth list

    # Build application
    - name: Build application
      run: ./gradlew build --no-daemon -x test

    # Build and push Docker image to Artifact Registry
    - name: Build and Push Docker image
      run: |
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

    # Setup Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7

    # Set default values for optional secrets
    - name: Set Redis defaults
      run: |
        echo "REDIS_HOST=${{ secrets.SEARCH_REDIS_HOST != '' && secrets.SEARCH_REDIS_HOST || 'localhost' }}" >> $GITHUB_ENV
        echo "REDIS_PORT=${{ secrets.SEARCH_REDIS_PORT != '' && secrets.SEARCH_REDIS_PORT || '6379' }}" >> $GITHUB_ENV

    # Create terraform.tfvars with current values
    - name: Create terraform.tfvars
      working-directory: terraform
      run: |
        cat > terraform.tfvars << EOF
        project_id     = "${{ env.PROJECT_ID }}"
        region         = "${{ env.REGION }}"
        service_name   = "${{ env.SERVICE_NAME }}"
        container_image = "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
        environment    = "dev"
        min_instances  = 0
        max_instances  = 10
        cpu_limit      = "2000m"
        memory_limit   = "4Gi"
        
        # All secrets (database and keycloak) are now shared - no variables needed
        EOF

    # Initialize Terraform
    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    # Plan Terraform changes (only Cloud Run service)
    - name: Terraform Plan
      working-directory: terraform
      run: |
        terraform plan \
          -target=google_cloud_run_v2_service.search_app \
          -target=google_cloud_run_service_iam_member.search_public_access

    # Apply Terraform changes (only Cloud Run service)
    - name: Terraform Apply
      working-directory: terraform
      run: |
        terraform apply -auto-approve \
          -target=google_cloud_run_v2_service.search_app \
          -target=google_cloud_run_service_iam_member.search_public_access

    # Get service URL
    - name: Get Service URL
      working-directory: terraform
      run: |
        SERVICE_URL=$(terraform output -raw service_url)
        echo "🚀 Search Service deployed successfully!"
        echo "📍 Service URL: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

    # Health check
    - name: Health Check
      run: |
        echo "⏳ Waiting for service to be ready..."
        sleep 60
        
        for i in {1..10}; do
          if curl -f -s "${{ env.SERVICE_URL }}/api/actuator/health" > /dev/null; then
            echo "✅ Health check passed!"
            break
          else
            echo "⏳ Health check attempt $i/10 failed, retrying in 15 seconds..."
            sleep 15
          fi
        done

    # Test specific endpoints
    - name: Test Search Service Endpoints
      run: |
        echo "🧪 Testing Search Service endpoints..."
        
        # Test health endpoint
        if curl -f -s "${{ env.SERVICE_URL }}/api/actuator/health" > /dev/null; then
          echo "✅ Health endpoint is accessible!"
        else
          echo "⚠️ Health endpoint might still be starting up..."
        fi
        
        # Test search endpoints availability (should return method not allowed or auth error, not 404)
        if curl -s -o /dev/null -w "%{http_code}" "${{ env.SERVICE_URL }}/api/search/stocks" | grep -E "^(401|405|400)$" > /dev/null; then
          echo "✅ Search endpoints are accessible!"
        else
          echo "⚠️ Search endpoints might still be starting up..."
        fi

    # Deployment summary
    - name: Deployment Summary
      run: |
        echo "## 🚀 Search Service Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Service Name | ${{ env.SERVICE_NAME }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Region | ${{ env.REGION }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Image | ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Service URL | ${{ env.SERVICE_URL }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Health Check | ${{ env.SERVICE_URL }}/api/actuator/health |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit SHA | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔐 API Endpoints" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check**: [${{ env.SERVICE_URL }}/api/actuator/health](${{ env.SERVICE_URL }}/api/actuator/health)" >> $GITHUB_STEP_SUMMARY
        echo "- **Search Stocks**: ${{ env.SERVICE_URL }}/api/search/stocks" >> $GITHUB_STEP_SUMMARY
        echo "- **Screen Stocks**: ${{ env.SERVICE_URL }}/api/screen/stocks" >> $GITHUB_STEP_SUMMARY
        echo "- **Search Companies**: ${{ env.SERVICE_URL }}/api/search/companies" >> $GITHUB_STEP_SUMMARY
